app BlogApp {
  wasp: {
    version: "^0.13.0"
  },
  title: "BlogApp",
  client: {
    rootComponent: import { Layout } from "@src/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@src/pages/auth/Signup.jsx"
}

entity User {=psl
    id    Int    @id @default(autoincrement())
    posts Post[]
psl=}

entity Post {=psl
    id          Int     @id @default(autoincrement())
    title       String
    content     String
    isPublished Boolean @default(false)
    author      User    @relation(fields: [authorId], references: [id])
    authorId    Int
psl=}

action createPost {
  fn: import { createPost } from "@src/actions.js",
  entities: [Post],
}

action updatePost {
  fn: import { updatePost } from "@src/actions.js",
  entities: [Post],
}

action deletePost {
  fn: import { deletePost } from "@src/actions.js",
  entities: [Post],
}

query getPost {
  fn: import { getPost } from "@src/queries.js",
  entities: [Post],
}

query getPosts {
  fn: import { getPosts } from "@src/queries.js",
  entities: [Post],
}

query getUserPosts {
  fn: import { getUserPosts } from "@src/queries.js",
  entities: [Post],
}

route ProfileRoute { path: "/profile", to: ProfilePage }
page ProfilePage {
  component: import ProfilePage from "@src/pages/Profile.jsx",
  authRequired: true
}

route PostRoute { path: "/post/:postId", to: PostPage }
page PostPage {
  component: import Post from "@src/pages/Post.jsx",
  authRequired: false
}

route HomeRoute { path: "/", to: HomePage }
page HomePage {
  component: import HomePage from "@src/pages/Home.jsx",
  authRequired: false
}